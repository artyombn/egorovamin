import re
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

from aiogram import Router, types, F
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, CallbackQuery

from config.services import scheduler, bot

from keyboards.base_commands import ButtonText, button_agreement, keyboards_get_eng_lvl
from reminders.reminders import send_reminder
from .base_states import BaseStates
from .base_validation import NAME_REGEX, EMAIL_REGEX

import database.users.requests as rq
from database.resources.requests import keyboards_resources

router = Router(name=__name__)

load_dotenv(os.path.join('config', '.env'))


@router.message(CommandStart())
async def start_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_exists = await rq.check_user_exists(user_id)
    keyboard = await keyboards_resources()
    if user_exists:
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç, <b>{user_exists}</b>! –ê —è —Ç–µ–±—è —É–∑–Ω–∞–ª"
        )
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f"–°–∫–æ—Ä–µ–µ —á–µ–∫–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ üëá",
            reply_markup=keyboard,
        )

    else:
        await message.answer(
            text=f"–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=button_agreement(),
        )

        file_id = os.getenv('FILE_ID')
        # file_path = 'media/Agreement.pdf'

        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_DOCUMENT,
        )

        await message.bot.send_document(
            chat_id=message.chat.id,
            document=file_id,
        )

        # document_message = await message.bot.send_document(
        #     chat_id=message.chat.id,
        #     document=types.FSInputFile(
        #         path=file_path,
        #         filename="–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.pdf"
        #     )
        # )

        # file_id = document_message.document.file_id
        # print(f"file_id: {file_id}")

        await state.set_state(BaseStates.WAITING_FOR_AGREEMENT)


@router.message(StateFilter(BaseStates.WAITING_FOR_AGREEMENT))
async def handle_non_agreement(message: types.Message, state: FSMContext):
    if message.text != ButtonText.AGREEMENT:
        await message.answer(
            text=f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=button_agreement(),
        )
    else:
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–æ–π –±–æ—Ç (–ú–∏–ª–µ–Ω—ã), –≤ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: –ø–æ–¥–±–æ—Ä–∫–∏, —Å–∞–π—Ç—ã, —É—Ä–æ–∫–∏, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –µ—â–µ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ.\n–û–±–µ—â–∞—é –Ω–µ —Å–ø–∞–º–∏—Ç—å! –ê —á—Ç–æ–±—ã —è —Å–º–æ–≥–ª–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üëá",
            reply_markup=ReplyKeyboardRemove(),
        )
        await rq.get_tg_user_info(message.from_user.id, message.from_user.username)
        await state.update_data(user_tg_id=message.from_user.id)
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.TYPING,
        )
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f"–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n<i>–ø—Ä–∏–º–µ—Ä: –ú–∏–ª–µ–Ω–∞</i>",
        )

        job_id = f'reminder_job_{message.from_user.id}'
        reminder_time = datetime.now() + timedelta(minutes=720)
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=reminder_time,
            args=[message.chat.id],
            misfire_grace_time=100,
            id=job_id,
        )

        await state.set_state(BaseStates.GET_NAME)


@router.message(BaseStates.GET_NAME, F.text)
async def get_name(message: types.Message, state: FSMContext):
    user_name = message.text.strip().capitalize()

    if re.match(NAME_REGEX, user_name):
        await state.update_data(user_name=user_name)
        await rq.get_user_name(message.from_user.id, user_name)
        await message.answer(f"–î–∞–π —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–∫—É\n<i>–ø—Ä–∏–º–µ—Ä: egorovamln_help@gmail.com</i>")
        await state.set_state(BaseStates.GET_EMAIL)

    else:
        await message.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã.")

@router.message(BaseStates.GET_EMAIL, F.text)
async def get_email(message: types.Message, state: FSMContext):
    user_email = message.text

    if re.match(EMAIL_REGEX, user_email):
        await state.update_data(user_email=user_email)
        await rq.get_user_email(message.from_user.id, user_email)
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f"–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ? –í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–º –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=keyboards_get_eng_lvl().as_markup(),
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")

@router.callback_query(lambda c: c.data.startswith("level_"))
async def handle_eng_lvl(callback_query: CallbackQuery, state: FSMContext):
    lvl = callback_query.data.split("_")[1]
    data = await state.get_data()
    user_tg_id = data.get('user_tg_id')
    user_email = data.get('user_email')
    await state.update_data(level=lvl)
    await rq.get_user_tag(user_email, lvl)
    await callback_query.message.answer(
        text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–µ –±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
    )
    await callback_query.message.delete()

    await callback_query.message.bot.send_chat_action(
        chat_id=callback_query.message.chat.id,
        action=ChatAction.TYPING,
    )

    keyboard = await keyboards_resources()

    await callback_query.message.bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=f"–°–∫–æ—Ä–µ–µ —á–µ–∫–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ üëá",
        reply_markup=keyboard,
    )

    await callback_query.answer()

    job_id = f'reminder_job_{user_tg_id}'
    scheduler.remove_job(job_id)

    await state.clear()


